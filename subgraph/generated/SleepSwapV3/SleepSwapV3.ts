// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CancelOrder extends ethereum.Event {
  get params(): CancelOrder__Params {
    return new CancelOrder__Params(this);
  }
}

export class CancelOrder__Params {
  _event: CancelOrder;

  constructor(event: CancelOrder) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get orderId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get isBuy(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class OrderCreated extends ethereum.Event {
  get params(): OrderCreated__Params {
    return new OrderCreated__Params(this);
  }
}

export class OrderCreated__Params {
  _event: OrderCreated;

  constructor(event: OrderCreated) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isBuy(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get open(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get executed(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }
}

export class OrderExecuted extends ethereum.Event {
  get params(): OrderExecuted__Params {
    return new OrderExecuted__Params(this);
  }
}

export class OrderExecuted__Params {
  _event: OrderExecuted;

  constructor(event: OrderExecuted) {
    this._event = event;
  }

  get orderId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get user(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isBuy(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }

  get recieved(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get usdtForBuy(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get tokensForSell(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get usdtAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get tokenAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SleepSwapV3__ordersResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;
  value5: boolean;
  value6: boolean;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean,
    value5: boolean,
    value6: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromBoolean(this.value6));
    return map;
  }
}

export class SleepSwapV3__positionsResult {
  value0: Address;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: Address,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class SleepSwapV3 extends ethereum.SmartContract {
  static bind(address: Address): SleepSwapV3 {
    return new SleepSwapV3("SleepSwapV3", address);
  }

  feePercent(): BigInt {
    let result = super.call("feePercent", "feePercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePercent", "feePercent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  orders(param0: BigInt): SleepSwapV3__ordersResult {
    let result = super.call(
      "orders",
      "orders(uint256):(uint256,address,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new SleepSwapV3__ordersResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean(),
      result[5].toBoolean(),
      result[6].toBoolean()
    );
  }

  try_orders(param0: BigInt): ethereum.CallResult<SleepSwapV3__ordersResult> {
    let result = super.tryCall(
      "orders",
      "orders(uint256):(uint256,address,uint256,uint256,bool,bool,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SleepSwapV3__ordersResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean(),
        value[5].toBoolean(),
        value[6].toBoolean()
      )
    );
  }

  ordersCount(): BigInt {
    let result = super.call("ordersCount", "ordersCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ordersCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("ordersCount", "ordersCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  poolFee(): i32 {
    let result = super.call("poolFee", "poolFee():(uint24)", []);

    return result[0].toI32();
  }

  try_poolFee(): ethereum.CallResult<i32> {
    let result = super.tryCall("poolFee", "poolFee():(uint24)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  positions(param0: Address): SleepSwapV3__positionsResult {
    let result = super.call(
      "positions",
      "positions(address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SleepSwapV3__positionsResult(
      result[0].toAddress(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_positions(
    param0: Address
  ): ethereum.CallResult<SleepSwapV3__positionsResult> {
    let result = super.tryCall(
      "positions",
      "positions(address):(address,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SleepSwapV3__positionsResult(
        value[0].toAddress(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  swapRouter(): Address {
    let result = super.call("swapRouter", "swapRouter():(address)", []);

    return result[0].toAddress();
  }

  try_swapRouter(): ethereum.CallResult<Address> {
    let result = super.tryCall("swapRouter", "swapRouter():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  swapTokenFromUsdt(_amountIn: BigInt): BigInt {
    let result = super.call(
      "swapTokenFromUsdt",
      "swapTokenFromUsdt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountIn)]
    );

    return result[0].toBigInt();
  }

  try_swapTokenFromUsdt(_amountIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapTokenFromUsdt",
      "swapTokenFromUsdt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountIn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  swapUsdtFromToken(_amountIn: BigInt): BigInt {
    let result = super.call(
      "swapUsdtFromToken",
      "swapUsdtFromToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountIn)]
    );

    return result[0].toBigInt();
  }

  try_swapUsdtFromToken(_amountIn: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "swapUsdtFromToken",
      "swapUsdtFromToken(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_amountIn)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenAddress(): Address {
    let result = super.call("tokenAddress", "tokenAddress():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAddress", "tokenAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenBalance(): BigInt {
    let result = super.call("tokenBalance", "tokenBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenBalance", "tokenBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenFees(): BigInt {
    let result = super.call("tokenFees", "tokenFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_tokenFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenFees", "tokenFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdtAddress(): Address {
    let result = super.call("usdtAddress", "usdtAddress():(address)", []);

    return result[0].toAddress();
  }

  try_usdtAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("usdtAddress", "usdtAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  usdtBalance(): BigInt {
    let result = super.call("usdtBalance", "usdtBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usdtBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdtBalance", "usdtBalance():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  usdtFees(): BigInt {
    let result = super.call("usdtFees", "usdtFees():(uint256)", []);

    return result[0].toBigInt();
  }

  try_usdtFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("usdtFees", "usdtFees():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  userOrders(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "userOrders",
      "userOrders(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_userOrders(param0: Address, param1: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userOrders",
      "userOrders(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _usdtAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _swapRouter(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _manager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddManagerCall extends ethereum.Call {
  get inputs(): AddManagerCall__Inputs {
    return new AddManagerCall__Inputs(this);
  }

  get outputs(): AddManagerCall__Outputs {
    return new AddManagerCall__Outputs(this);
  }
}

export class AddManagerCall__Inputs {
  _call: AddManagerCall;

  constructor(call: AddManagerCall) {
    this._call = call;
  }

  get _manager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AddManagerCall__Outputs {
  _call: AddManagerCall;

  constructor(call: AddManagerCall) {
    this._call = call;
  }
}

export class ExecuteOrdersCall extends ethereum.Call {
  get inputs(): ExecuteOrdersCall__Inputs {
    return new ExecuteOrdersCall__Inputs(this);
  }

  get outputs(): ExecuteOrdersCall__Outputs {
    return new ExecuteOrdersCall__Outputs(this);
  }
}

export class ExecuteOrdersCall__Inputs {
  _call: ExecuteOrdersCall;

  constructor(call: ExecuteOrdersCall) {
    this._call = call;
  }

  get _orderIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class ExecuteOrdersCall__Outputs {
  _call: ExecuteOrdersCall;

  constructor(call: ExecuteOrdersCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get _buyPrices(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _sellPrices(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class SwapTokenFromUsdtCall extends ethereum.Call {
  get inputs(): SwapTokenFromUsdtCall__Inputs {
    return new SwapTokenFromUsdtCall__Inputs(this);
  }

  get outputs(): SwapTokenFromUsdtCall__Outputs {
    return new SwapTokenFromUsdtCall__Outputs(this);
  }
}

export class SwapTokenFromUsdtCall__Inputs {
  _call: SwapTokenFromUsdtCall;

  constructor(call: SwapTokenFromUsdtCall) {
    this._call = call;
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapTokenFromUsdtCall__Outputs {
  _call: SwapTokenFromUsdtCall;

  constructor(call: SwapTokenFromUsdtCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SwapUsdtFromTokenCall extends ethereum.Call {
  get inputs(): SwapUsdtFromTokenCall__Inputs {
    return new SwapUsdtFromTokenCall__Inputs(this);
  }

  get outputs(): SwapUsdtFromTokenCall__Outputs {
    return new SwapUsdtFromTokenCall__Outputs(this);
  }
}

export class SwapUsdtFromTokenCall__Inputs {
  _call: SwapUsdtFromTokenCall;

  constructor(call: SwapUsdtFromTokenCall) {
    this._call = call;
  }

  get _amountIn(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SwapUsdtFromTokenCall__Outputs {
  _call: SwapUsdtFromTokenCall;

  constructor(call: SwapUsdtFromTokenCall) {
    this._call = call;
  }

  get amountOut(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFeesPercentageCall extends ethereum.Call {
  get inputs(): UpdateFeesPercentageCall__Inputs {
    return new UpdateFeesPercentageCall__Inputs(this);
  }

  get outputs(): UpdateFeesPercentageCall__Outputs {
    return new UpdateFeesPercentageCall__Outputs(this);
  }
}

export class UpdateFeesPercentageCall__Inputs {
  _call: UpdateFeesPercentageCall;

  constructor(call: UpdateFeesPercentageCall) {
    this._call = call;
  }

  get _newPercentage(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateFeesPercentageCall__Outputs {
  _call: UpdateFeesPercentageCall;

  constructor(call: UpdateFeesPercentageCall) {
    this._call = call;
  }
}

export class UpdateManagerCall extends ethereum.Call {
  get inputs(): UpdateManagerCall__Inputs {
    return new UpdateManagerCall__Inputs(this);
  }

  get outputs(): UpdateManagerCall__Outputs {
    return new UpdateManagerCall__Outputs(this);
  }
}

export class UpdateManagerCall__Inputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }

  get _address(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateManagerCall__Outputs {
  _call: UpdateManagerCall;

  constructor(call: UpdateManagerCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
